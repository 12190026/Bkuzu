{"version":3,"file":"static/js/500.494288fd.chunk.js","mappings":"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","sources":["components/Post/PostSubContent.js","components/UI/StyledBadge.js","hooks/useFetchPost.js","components/Comment/Comment.js","hooks/useCreateComment.js","components/Comment/CommentTextArea.js","screens/Post.js","services/PostServices.js"],"sourcesContent":["import { Typography } from '@material-ui/core'\nimport React from 'react'\n\nfunction PostSubContent({ post }) {\n  const isContent = () => {\n    return (\n      post.body.feelings ||\n      post.body.with.length ||\n      post.body.at ||\n      post.body.date\n    )\n  }\n  return (\n    <div>\n      <Typography>\n        <b>{isContent() && post.user.name}</b>\n        {post.body.feelings ? (\n          <>\n            &nbsp; is feeling <b>{post.body.feelings}</b>\n          </>\n        ) : null}\n        {post.body.with.length ? (\n          <>\n            {` with `}\n            <b>\n              {post.body.with.map((u) => (\n                <span key={u.id}> &nbsp;{u.name},</span>\n              ))}\n            </b>\n          </>\n        ) : null}\n        {post.body.at ? (\n          <>\n            {` at `} <b>{post.body.at} </b>\n          </>\n        ) : null}\n        {post.body.date ? (\n          <>\n            <b>{new Date(post.body.date).toLocaleDateString()}</b>\n          </>\n        ) : null}\n      </Typography>\n    </div>\n  )\n}\n\nexport default PostSubContent\n","import React from 'react'\nimport Badge from '@material-ui/core/Badge'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst UIBadge = withStyles((theme) => ({\n  badge: {\n    right: 8,\n    top: 32,\n    border: `2px solid ${theme.palette.background.paper}`,\n    padding: '5px 5px',\n    borderRadius: '100%',\n  },\n}))(Badge)\n\nexport default function StyledBadge({ isActive, children,border }) {\n  return (\n    <UIBadge\n      variant=\"dot\"\n      color={isActive ? 'secondary' : 'error'}\n      style={{ border: border, borderRadius: '100%', padding: '4px' }}\n    >\n      {children}\n    </UIBadge>\n  )\n}\n","import { useContext, useState } from 'react'\nimport axios from 'axios'\nimport { PostContext } from '../App'\n\nconst url = process.env.REACT_APP_ENDPOINT\n\nconst useFetchPost = () => {\n  const [loading, setLoading] = useState(false)\n  const { postState, postDispatch } = useContext(PostContext)\n\n  let token = JSON.parse(localStorage.getItem('token'))\n\n  const fetchComments = async (post_id) => {\n    if (\n      postState.post.commentPagination.currentPage >\n      postState.post.commentPagination.totalPage\n    ) {\n      return\n    }\n    setLoading(true)\n    try {\n      const res = await axios.get(\n        `${url}/api/post/${post_id}/comment/?page=${postState.post.commentPagination.currentPage}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        },\n      )\n      if (res.data) {\n        postDispatch({\n          type: 'COMMENT_PAGINATION',\n          payload: {\n            currentPage: res.data.pagination.currentPage + 1,\n            totalPage: res.data.pagination.totalPage,\n            comments: res.data.comments,\n          },\n        })\n      }\n      setLoading(false)\n    } catch (err) {\n      setLoading(false)\n      console.log(err)\n    }\n  }\n\n  const fetchPosts = async () => {\n    if (\n      postState.postPagination.currentPage > postState.postPagination.totalPage\n    ) {\n      return\n    } else {\n      setLoading(true)\n      try {\n        const { data } = await axios.get(\n          `${url}/api/post/?page=${postState.postPagination.currentPage}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          },\n        )\n        if (data) {\n          postDispatch({\n            type: 'POST_PAGINATION',\n            payload: {\n              currentPage: data.pagination.currentPage + 1,\n              totalPage: data.pagination.totalPage,\n              posts: data.posts,\n            },\n          })\n        }\n        setLoading(false)\n      } catch (err) {\n        setLoading(false)\n        console.log(err)\n      }\n    }\n  }\n\n  return {\n    fetchPosts,\n    fetchComments,\n    loading,\n  }\n}\n\nexport default useFetchPost\n","import {\n  Avatar,\n  Button,\n  Divider,\n  Paper,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n} from '@material-ui/core'\nimport React, { useContext } from 'react'\nimport AvartarText from '../UI/AvartarText'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faThumbsUp as filledLike } from '@fortawesome/free-solid-svg-icons'\nimport { faThumbsUp } from '@fortawesome/free-regular-svg-icons'\nimport { likeDislikeComment } from '../../services/PostServices'\nimport { PostContext, UserContext, UIContext } from '../../App'\nfunction Comment({ comment }) {\n  const { postDispatch } = useContext(PostContext)\n  const { userState } = useContext(UserContext)\n  const { uiDispatch, uiState } = useContext(UIContext)\n\n  function handleLikeComment() {\n    likeDislikeComment(comment.id).then((res) => {\n      if (res.data) {\n        postDispatch({ type: 'LIKE_UNLIKE_COMMENT', payload: res.data.comment })\n        uiDispatch({\n          type: 'SET_MESSAGE',\n          payload: { color: 'success', text: res.data.message, display: true },\n        })\n      }\n    })\n  }\n\n  function isLiked() {\n    return comment.likes.includes(userState.currentUser.id)\n  }\n\n  const listItems = (\n    <ListItem alignItems=\"flex-start\">\n      <ListItemAvatar>\n        {comment.user.profile_pic ? (\n          <Avatar>\n            <img\n              src={comment.user.profile_pic}\n              style={{ width: '100%', height: '100%' }}\n              alt={comment.user.name}\n            />\n          </Avatar>\n        ) : (\n          <AvartarText\n            text={comment.user.name}\n            bg={comment.user.active ? 'seagreen' : 'tomato'}\n          />\n        )}\n      </ListItemAvatar>\n      <ListItemText\n        primary={\n          <Typography style={{ color: uiState.darkMode && '#fff' }}>\n            {comment.user.name}\n          </Typography>\n        }\n        secondary={\n          <>\n            {comment.body.text && comment.body.text}\n\n            {comment.body.image && (\n              <Paper elevation={0} style={{ padding: '8px' }}>\n                <Avatar\n                  variant=\"square\"\n                  style={{ width: '40%', height: '100%' }}\n                >\n                  <img\n                    src={comment.body.image}\n                    style={{ width: '100%', height: '100%' }}\n                    alt=\"\"\n                  />\n                </Avatar>\n              </Paper>\n            )}\n          </>\n        }\n      />\n    </ListItem>\n  )\n  return (\n    <div\n      style={{ marginTop: '16px', marginBottom: !uiState.mdScreen && '50px' }}\n    >\n      <List>\n        {listItems}\n\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'flex-end',\n          }}\n        >\n          <Button\n            onClick={handleLikeComment}\n            size=\"small\"\n            color=\"primary\"\n            startIcon={\n              isLiked() ? (\n                <FontAwesomeIcon icon={filledLike} size=\"sm\" />\n              ) : (\n                <FontAwesomeIcon icon={faThumbsUp} size=\"sm\" />\n              )\n            }\n          >\n            ({comment.likes.length})\n          </Button>\n        </div>\n        <Divider variant=\"inset\" component=\"li\" />\n      </List>\n    </div>\n  )\n}\n\nexport default Comment\n","import { useContext, useState } from 'react'\nimport axios from 'axios'\nimport { PostContext, UIContext } from '../App'\n\nconst url = process.env.REACT_APP_ENDPOINT\n\nconst useCreateComment = ({\n  post_id,\n  commentText,\n  setError,\n  setCommentText,\n}) => {\n  const [loading, setLoading] = useState(false)\n\n  const { postDispatch } = useContext(PostContext)\n  const { uiDispatch } = useContext(UIContext)\n\n  const createComment = async () => {\n    setLoading(true)\n    try {\n      let token = JSON.parse(localStorage.getItem('token'))\n      const response = await axios.post(\n        `${url}/api/post/${post_id}/comment`,\n        { text: commentText },\n        { \n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        },\n      )\n      if (response.data) {\n        setCommentText('')\n        postDispatch({ type: 'ADD_POST_COMMENT', payload: response.data.comment })\n        uiDispatch({\n          type: 'SET_MESSAGE',\n          payload: {\n            color: 'success',\n            display: true,\n            text: response.data.message,\n          },\n        })\n      }\n      setLoading(false)\n    } catch (err) {\n      setLoading(false)\n      console.log(err)\n      if (err && err.response) {\n        if (err.response.status === 422) {\n          setError(err.response.data.error)\n        }\n\n        uiDispatch({ type: 'SET_MESSAGE', payload: err.response.data.error })\n      }\n    }\n  }\n\n  return {\n    createComment,\n    loading,\n  }\n}\n\nexport default useCreateComment\n","import {\n  Avatar,\n  Grid,\n  IconButton,\n  LinearProgress,\n  Paper,\n  TextField,\n} from '@material-ui/core'\nimport React, { useContext, useState } from 'react'\nimport AvartarText from '../UI/AvartarText'\nimport StyledBadge from '../UI/StyledBadge'\nimport { UIContext, UserContext } from '../../App'\nimport { SendOutlined } from '@material-ui/icons'\nimport useCreateComment from '../../hooks/useCreateComment'\nfunction CommentTextArea({ post }) {\n  const { userState } = useContext(UserContext)\n  const { uiState } = useContext(UIContext)\n\n  const [commentText, setCommentText] = useState('')\n  const [commentImage, setCommentImage] = useState()\n  const [error, setError] = useState('')\n\n  const { createComment, loading } = useCreateComment({\n    post_id: post.id,\n    commentText,\n    setCommentText,\n    setCommentImage,\n    commentImage,\n    setError,\n  })\n\n  const handleCommentChange = (e) => {\n    setError('')\n    setCommentText(e.target.value)\n  }\n\n  return (\n    <>\n      <Grid\n        container\n        justify=\"flex-start\"\n        spacing={1}\n        style={{\n          marginTop: '8px',\n          marginBottom: '8px',\n        }}\n      >\n        <Grid item>\n          <StyledBadge isActive={userState.currentUser.active}>\n            {userState.currentUser.profile_pic ? (\n              <Avatar>\n                <img\n                  src={userState.currentUser.profile_pic}\n                  style={{ width: '100%', height: '100%' }}\n                  alt={userState.currentUser.name}\n                />\n              </Avatar>\n            ) : (\n              <AvartarText text={userState.currentUser.name} bg=\"tomato\" />\n            )}\n          </StyledBadge>\n        </Grid>\n        <Grid item md={8} sm={8} xs={8}>\n          <TextField\n            placeholder=\"Write a Comments...\"\n            error={error ? true : false}\n            helperText={error}\n            value={commentText}\n            onChange={handleCommentChange}\n            multiline\n            rowsMax={4}\n            style={{\n              width: '100%',\n              borderRadius: '20px',\n              border: 'none',\n              background: uiState.darkMode ? 'rgb(24,25,26)': 'rgb(240,242,245)',\n              padding: '8px 16px',\n            }}\n          />\n         \n        </Grid>\n        <Grid item ms={2} sm={2} xs={2}>\n        <IconButton onClick={createComment}>\n            <SendOutlined />\n          </IconButton>\n        </Grid>\n      </Grid>\n\n      {loading ? (\n        <Paper\n          elevation={0}\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            padding: '16px',\n          }}\n        >\n          <LinearProgress color=\"primary\" style={{ width: '100%' }} />\n        </Paper>\n      ) : null}\n    </>\n  )\n}\n\nexport default CommentTextArea\n","import {\n  Avatar,\n  Card,\n  CardContent,\n  CardHeader,\n  CardMedia,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  useMediaQuery,\n  useTheme,\n  Button,\n} from '@material-ui/core'\nimport moment from 'moment'\nimport React, { useContext, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { PostContext, UIContext } from '../App'\nimport useFetchPost from '../hooks/useFetchPost'\nimport Comment from '../components/Comment/Comment'\n\nimport AvartarText from '../components/UI/AvartarText'\nimport CommentTextArea from '../components/Comment/CommentTextArea'\n\nimport PostSubContent from '../components/Post/PostSubContent'\n\nfunction Post() {\n  const { postState, postDispatch } = useContext(PostContext)\n  const { uiState } = useContext(UIContext)\n  const params = useParams()\n\n  const theme = useTheme()\n  const xsScreen = useMediaQuery(theme.breakpoints.only('xs'))\n\n  const { fetchComments } = useFetchPost()\n\n  useEffect(() => {\n    const post = postState.posts.find((post) => post.id == params.postId)\n    postDispatch({ type: 'SET_CURRENT_POST', payload: post })\n    fetchComments(params.postId)\n\n    return () => {\n      postDispatch({ type: 'REMOVE_CURRENT_POST' })\n    }\n  }, [])\n\n  function isContent() {\n    return (\n      postState.post.body.feelings ||\n      postState.post.body.with.length ||\n      postState.post.body.at ||\n      postState.post.body.date\n    )\n  }\n\n  const handleFetchComments = () => {\n    fetchComments(params.postId)\n  }\n  return (\n    <div\n      style={{\n        paddingTop: '100px',\n        minHeight: '100vh',\n      }}\n    >\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item md={7} sm={12} xs={12}>\n            <Card\n              style={{\n                width: '100%',\n                height: '80vh',\n                position: 'sticky',\n                top: 100,\n                backgroundColor: uiState.darkMode && 'rgb(36,37,38)',\n              }}\n            >\n              {postState.post.user && (\n                <CardHeader\n                  avatar={\n                    postState.post.user.profile_pic ? (\n                      <Avatar>\n                        <img\n                          src={postState.post.user.profile_pic}\n                          style={{ width: '100%', height: '100%' }}\n                          alt=\"\"\n                        />\n                      </Avatar>\n                    ) : (\n                      <AvartarText\n                        text={postState.post.user.name}\n                        bg={postState.post.user.active ? 'seagreen' : 'tomato'}\n                      />\n                    )\n                  }\n                  title={\n                    postState.post && (\n                      <Typography style={{ fontWeight: '800' }}>\n                        {postState.post.user.name}\n                      </Typography>\n                    )\n                  }\n                  subheader={moment(postState.post.createdAt).fromNow()}\n                />\n              )}\n              {postState.post.body && isContent() && (\n                <CardContent\n                  style={{\n                    marginBottom: '16px',\n                    background: uiState.darkMode ? null : 'rgb(240,242,245)',\n                    padding: '16px',\n                  }}\n                >\n                  <PostSubContent post={postState.post} />\n                </CardContent>\n              )}\n\n              <CardContent>\n                <Typography\n                  style={{\n                    fontWeight: '400',\n                    fontSize: '16px',\n                    fontFamily: 'fantasy',\n                  }}\n                >\n                  {postState.post.content && postState.post.content}\n                </Typography>\n              </CardContent>\n\n              {postState.post.image && (\n                <CardMedia\n                  component=\"img\"\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'contain',\n                  }}\n                  image={postState.post.image}\n                  title=\"Paella dish\"\n                />\n              )}\n\n              {postState.post.profilePostData &&\n              Object.keys(postState.post.profilePostData).length ? (\n                <>\n                  <CardMedia\n                    style={{ width: '100%', height: '200px' }}\n                    image={postState.post.profilePostData.coverImage}\n                    title={postState.post.user.name}\n                  />\n\n                  <Avatar\n                    style={{\n                      border: '6px solid tomato',\n                      width: xsScreen ? '300px' : '400px',\n                      height: xsScreen ? '300px' : '400px',\n                      display: 'flex',\n                      flexDirection: 'row',\n                      margin: 'auto',\n                      borderRadius: '100%',\n                      bottom: 130,\n                    }}\n                  >\n                    <img\n                      src={postState.post.profilePostData.profileImage}\n                      width=\"100%\"\n                      height=\"100%\"\n                      alt=\"\"\n                    />\n                  </Avatar>\n                </>\n              ) : null}\n            </Card>\n          </Grid>\n\n          <Grid\n            item\n            md={5}\n            sm={12}\n            xs={12}\n            style={{ marginBottom: !uiState.mdScreen ? '70px' : '0px' }}\n          >\n            <Paper\n              style={{\n                padding: '16px',\n                backgroundColor: uiState.darkMode && 'rgb(36,37,38)',\n              }}\n            >\n              <CommentTextArea post={postState.post} />\n            </Paper>\n            {postState.post.comments && postState.post.comments.length ? (\n              <>\n                {postState.post.comments.map((comment) => (\n                  <div key={comment.id}>\n                    <Comment comment={comment} />\n                  </div>\n                ))}\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                  {postState.post.commentPagination.totalPage ==\n                  postState.post.commentPagination.currentPage ? (\n                    <Typography variant=\"h6\" color=\"primary\">\n                      No more comments\n                    </Typography>\n                  ) : (\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={handleFetchComments}\n                    >\n                      More Comments\n                    </Button>\n                  )}\n                </div>\n              </>\n            ) : null}\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  )\n}\n\nexport default Post\n","import axios from 'axios'\nconst url = process.env.REACT_APP_ENDPOINT\n\nexport const fetchAllPosts = async () => {\n  let token = JSON.parse(localStorage.token)\n\n  try {\n    const response = await axios.get(`http://localhost:5000/api/post/`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n    if (response.data) {\n      return {\n        data: response.data,\n      }\n    }\n  } catch (err) {\n    console.log(err)\n  }\n}\n\n// export const fetchPostById = async (post_id) => {\n//   let token = JSON.parse(localStorage.token)\n\n//   try {\n//     const response = await axios.get(`${url}/api/post/${post_id}`, {\n//       headers: {\n//         Authorization: `Bearer ${token}`,\n//       },\n//     })\n//     if (response.data) {\n//       return {\n//         data: response.data,\n//       }\n//     }\n//   } catch (err) {\n//     console.log(err)\n//   }\n// }\n\nexport const likeDislikePost = async (post_id) => {\n  let token = JSON.parse(localStorage.token)\n\n  try {\n    const response = await axios.get(\n      `${url}/api/post/${post_id}/like_dislike`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      },\n    )\n    if (response.data) {\n      return {\n        data: response.data,\n      }\n    }\n  } catch (err) {\n    console.log(err)\n    if (err && err.response) {\n      return {\n        status: err.response.status,\n        error: err.response.data.error,\n      }\n    }\n  }\n}\n\nexport const likeDislikeComment = async (comment_id) => {\n  try {\n    let token = JSON.parse(localStorage.token)\n    const response = await axios.get(\n      `${url}/api/post/comment/${comment_id}/like_dislike`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      },\n    )\n    if (response.data) {\n      return {\n        data: response.data,\n      }\n    }\n  } catch (err) {\n    console.log(err)\n  }\n}\n"],"names":["post","body","feelings","with","length","at","date","user","name","map","u","key","id","Date","toLocaleDateString","UIBadge","withStyles","theme","badge","right","top","border","palette","background","paper","padding","borderRadius","Badge","StyledBadge","isActive","children","variant","color","style","url","process","useState","loading","setLoading","useContext","PostContext","postState","postDispatch","token","JSON","parse","localStorage","getItem","fetchComments","post_id","commentPagination","currentPage","totalPage","axios","headers","Authorization","res","data","type","payload","pagination","comments","console","log","fetchPosts","postPagination","posts","comment","userState","UserContext","UIContext","uiDispatch","uiState","listItems","ListItem","alignItems","ListItemAvatar","profile_pic","Avatar","src","width","height","alt","AvartarText","text","bg","active","ListItemText","primary","Typography","darkMode","secondary","image","Paper","elevation","marginTop","marginBottom","mdScreen","List","display","justifyContent","Button","onClick","likeDislikeComment","then","message","size","startIcon","likes","includes","currentUser","icon","filledLike","faThumbsUp","Divider","component","commentText","setError","setCommentText","createComment","response","status","error","commentImage","setCommentImage","useCreateComment","Grid","container","justify","spacing","item","md","sm","xs","TextField","placeholder","helperText","value","onChange","e","target","multiline","rowsMax","ms","IconButton","SendOutlined","flexDirection","LinearProgress","params","useParams","useTheme","xsScreen","useMediaQuery","breakpoints","only","useFetchPost","useEffect","find","postId","paddingTop","minHeight","Container","Card","position","backgroundColor","CardHeader","avatar","title","fontWeight","subheader","moment","createdAt","fromNow","CardContent","PostSubContent","fontSize","fontFamily","content","CardMedia","objectFit","profilePostData","Object","keys","coverImage","margin","bottom","profileImage","likeDislikePost","comment_id"],"sourceRoot":""}