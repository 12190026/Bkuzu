{"version":3,"file":"static/js/955.d2fd7876.chunk.js","mappings":"sWAEA,GAAeA,E,QAAAA,GAAcC,EAAAA,cAAoB,OAAQ,CACvDC,EAAG,+JACD,c,UCyDJ,MA1DA,WACE,OAA8BC,EAAAA,EAAAA,WAAS,GAAM,eAAtCC,EAAO,KAAEC,EAAU,KAC1B,GAA0BF,EAAAA,EAAAA,UAAS,MAAK,eAAjCG,EAAK,KAAEC,EAAQ,KACtB,GAAwBJ,EAAAA,EAAAA,UAAS,MAAK,eAA/BK,EAAI,KAAEC,EAAO,KAwCpB,SAASC,IACPH,EAAS,qDAETF,GAAW,EACb,CAEA,MAAO,CACLD,QAAAA,EACAI,KAAAA,EACAF,MAAAA,EACAK,YAhDkB,WAClBN,GAAW,GACXO,UAAUC,YAAYC,oBACpB,SAACC,IAUL,SAA2BA,GACzB,IAAIC,EAAM,8BAA0BD,EAASE,OAAOC,SAAQ,YAAIH,EAASE,OAAOE,UAAS,WACzFC,EAAAA,GAAAA,IACOJ,GACJK,MAAK,SAACC,IAQX,SAAyBA,GACvBb,EAAQ,CACNc,KAAY,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQC,KACdC,QAAe,OAANF,QAAM,IAANA,OAAM,EAANA,EAAQE,QACjBC,IAAW,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQI,KACbC,IAAW,OAANL,QAAM,IAANA,OAAM,EAANA,EAAQM,MACbC,OAAc,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQO,OAChBC,MAAa,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQQ,MACfC,SAAgB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQS,WAEpB1B,GAAW,EACb,CAlBM2B,CAAgBV,EAAOd,KACzB,IACCyB,OAAM,SAACC,GACNxB,GACF,GACJ,CAnBMyB,CAAkBpB,EACpB,IACA,SAACmB,GACCxB,GACF,GACA,CAAE0B,QAAS,KAEf,EAsCE7B,SAAAA,EAEJ,EC8BA,MA3EA,SAAsB,GAAqD,IAAnD8B,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAAaC,EAAc,EAAdA,eAC7C,GADoE,EAAPnC,SACjCD,EAAAA,EAAAA,WAAS,IAAM,eAApCqC,EAAM,KAAEC,EAAS,KACxB,EAMIC,IALOC,EAAe,EAAxBvC,QACAE,EAAK,EAALA,MACAE,EAAI,EAAJA,KACAD,EAAQ,EAARA,SACAI,EAAW,EAAXA,YAiBF,OAdAiC,EAAAA,EAAAA,YAAU,WACRN,EAAY9B,EACd,GAAG,CAACA,IAaF,gCACE,gBAACqC,EAAA,EAAM,CACLC,QAAQ,YACRC,MAAM,UACNC,QAAS,kBAAMP,GAAU,EAAK,GAAC,QAKjC,gBAACQ,EAAA,EAAM,CACLC,KAAMV,EACNW,QAAS,kBAAMV,GAAU,EAAM,EAC/BW,SAAS,KACTC,WAAS,GAET,gBAACC,EAAA,EAAW,wBACZ,gBAACC,EAAA,EAAa,KACXjD,GAAS,gBAACkD,EAAA,EAAK,CAACC,SAAS,SAASnD,GAClC+B,GACC,gBAACqB,EAAA,EAAU,KACRrB,EAASd,KAAI,IAAGc,EAASP,MAAK,IAAGO,EAASb,SAG/C,gBAACqB,EAAA,EAAM,CACLc,MAAO,CAAEC,MAAO,QAChBb,MAAM,UACND,QAAQ,YACRe,UAAW,gBAACC,EAAU,MACtBd,QAlCkB,WAC1BzC,EAAS,MACTI,GACF,GAiCWgC,EACC,gBAACoB,EAAA,EAAgB,CACfjB,QAAQ,gBACRC,MAAM,UACNiB,KAAK,SAGP,gBAIN,gBAACC,EAAA,EAAa,KACZ,gBAACpB,EAAA,EAAM,CAACG,QAAS,kBAAMP,GAAU,EAAM,GAAC,UACxC,gBAACI,EAAA,EAAM,CAACG,QAtDK,WACnBP,GAAU,GACVF,GACF,GAmDsC,YAKxC,E,SCrFM2B,EAAmC,G,SCCzBC,EAAcC,EAAgBC,GAC5C,IAAMC,E,SDDyBF,GACzB,uBAACG,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,GAuClB,OArCA5B,EAAAA,EAAAA,YAAU,WACR,GAAK6B,OAAeH,OAElBE,EAAcC,OAAeH,YAF/B,CAKA,IAAMI,EAAM,+CAAiDN,EAEvDO,EAAiBT,EAAYU,MAAK,SAAAC,GAAM,OAAAA,EAAGH,MAAQA,CAAG,IAEtDI,EAAS,WACbN,EAAcC,OAAeH,O,EAE/B,IAAIK,EAAJ,CAMA,IAAMI,EAASC,SAASC,cAAc,UAQtC,OAPAF,EAAOL,IAAMA,EACbK,EAAOG,OAAQ,EACfH,EAAOI,OAAQ,EACfJ,EAAOK,iBAAiB,OAAQN,GAC/BE,SAASK,KAAaC,YAAYP,GACnCb,EAAYqB,KAAKR,GAEV,WACLA,EAAOS,oBAAoB,OAAQV,GACnCC,EAAOU,SACPvB,EAAYwB,OACVxB,EAAYyB,WAAU,SAAAd,GAAM,OAAAA,EAAGH,MAAQA,CAAG,IAC1C,E,EAjBFC,EAAeS,iBAAiB,OAAQN,E,IAoBzC,CAACV,IAEGG,CACT,CCxCiBqB,CAAiBxB,GAC1ByB,GAAMC,EAAAA,EAAAA,QAAuB,MAC7B,mBAACC,EAAAA,EAAAA,GAAKC,EAAAA,EAAAA,GASZ,OAPApD,EAAAA,EAAAA,YAAU,WACH0B,GAAWuB,GAGhBG,EAAO,IAAI1B,EAAO2B,KAAKC,IAAIL,EAAIM,QAAS9B,G,GACvC,CAACC,EAAQuB,IAEL,CAAEA,IAAG,EAAEE,IAAG,EAAEzB,OAAM,EAC3B,CCHA,MAXA,SAAmB,GAAmB,IAAlBrD,EAAM,EAANA,OAAO,EAAD,EAACmF,KACjBP,EAAQ1B,EACd,0CACA,CACEkC,OAAQpF,EACRmF,UALyB,IAAC,KAAE,IACxBP,IAOR,OAAO,uBAAKA,IAAKA,EAAKlC,MAAO,CAAEC,MAAO,OAAQ0C,OAAQ,UACxD,E,8BCiHA,MAxGA,WACE,IAAQC,GAAcC,EAAAA,EAAAA,YAAWC,EAAAA,IAAzBF,UACR,GAAgCpG,EAAAA,EAAAA,UAAS,MAAK,eAAvCkC,EAAQ,KAAEC,EAAW,KAE5B,GAAkCoE,EAAAA,EAAAA,KAA1BC,EAAY,EAAZA,aAAcvG,EAAO,EAAPA,QAKtB,OACE,2BACE,gBAACwG,EAAA,EAAI,CAACC,WAAS,EAACC,WAAW,SAASC,QAAQ,iBAC1C,gBAACH,EAAA,EAAI,CAACI,MAAI,GACR,gBAACtD,EAAA,EAAU,CACTC,MAAO,CACLsD,SAAU,OACVC,WAAY,MACZC,aAAc,OACdC,UAAW,SACX,qBAKN,gBAACR,EAAA,EAAI,CAACI,MAAI,GACR,gBAAC,EAAY,CACX3E,SAAUA,EACVC,YAAaA,EACbC,eAtBa,WACrBoE,EAAatE,EACf,EAqBUjC,QAASA,MAIf,uBAAKuD,MAAO,CAAEyD,UAAW,OAAQD,aAAc,SAC5CZ,EAAUc,YAAYhF,UACrB,gBAACiF,EAAA,EAAI,KACH,gBAACC,EAAA,EAAQ,KACP,gBAACC,EAAA,EAAY,KACX,gBAAC,IAAe,CAACC,KAAMC,EAAAA,OAEzB,gBAACC,EAAA,EAAY,KAAEpB,EAAUc,YAAYhF,SAASd,OAEhD,gBAACgG,EAAA,EAAQ,KACP,gBAACC,EAAA,EAAY,KACX,gBAAC,IAAe,CAACC,KAAMG,EAAAA,OAEzB,gBAACD,EAAA,EAAY,KACVpB,EAAUc,YAAYhF,SAASP,QAGpC,gBAACyF,EAAA,EAAQ,KACP,gBAACC,EAAA,EAAY,KACX,gBAAC,IAAe,CAACC,KAAMI,EAAAA,MAEzB,gBAACF,EAAA,EAAY,KACVpB,EAAUc,YAAYhF,SAASb,UAGpC,gBAAC+F,EAAA,EAAQ,KACP,gBAACC,EAAA,EAAY,KACX,gBAAC,IAAe,CAACC,KAAMK,EAAAA,OAEzB,gBAACH,EAAA,EAAY,KACVpB,EAAUc,YAAYhF,SAASZ,IAAG,IAAG,MACrC8E,EAAUc,YAAYhF,SAASV,MAGpC,gBAAC4F,EAAA,EAAQ,KACP,gBAACC,EAAA,EAAY,KACX,gBAAC,IAAe,CAACC,KAAMG,EAAAA,OAEzB,gBAACD,EAAA,EAAY,KACVpB,EAAUc,YAAYhF,SAASR,SAIpC,gBAAC0F,EAAA,EAAQ,KACP,gBAACC,EAAA,EAAY,KACX,gBAAC,IAAe,CAACC,KAAMM,EAAAA,MAEzB,gBAACJ,EAAA,EAAY,KACVpB,EAAUc,YAAYhF,SAASN,YAMvCwE,EAAUc,YAAYhF,UACrB,gBAACuE,EAAA,EAAI,CAACC,WAAS,EAAClD,MAAO,CAAEyD,UAAW,SAClC,gBAACR,EAAA,EAAI,CAACI,MAAI,EAACgB,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7B,gBAAC,EAAS,CACRjH,OAAQ,CACNU,IAAKwG,WAAW5B,EAAUc,YAAYhF,SAASV,KAC/CF,IAAK0G,WAAW5B,EAAUc,YAAYhF,SAASZ,WASjE,C","sources":["../node_modules/@material-ui/icons/esm/LocationOn.js","hooks/useLocationService.js","components/settings/Location/EditLocation.js","../node_modules/react-hook-google-maps/src/useGoogleMapsApi.ts","../node_modules/react-hook-google-maps/src/useGoogleMaps.ts","components/UI/GoogleMap.js","components/settings/Location.js"],"sourcesContent":["import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"\n}), 'LocationOn');","import { useState } from 'react'\nimport axios from 'axios'\n\nfunction useLocationService() {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [data, setData] = useState(null)\n\n  const getLocation = () => {\n    setLoading(true)\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        getCityAndCountry(position)\n      },\n      (err) => {\n        locationError()\n      },\n      { timeout: 7000 },\n    )\n  }\n\n  function getCityAndCountry(position) {\n    let apiUrl = `https://geocode.xyz/${position.coords.latitude},${position.coords.longitude}?json=1`\n    axios\n      .get(apiUrl)\n      .then((result) => {\n        locationSuccess(result.data)\n      })\n      .catch((err) => {\n        locationError()\n      })\n  }\n\n  function locationSuccess(result) {\n    setData({\n      city: result?.city,\n      country: result?.country,\n      lat: result?.latt,\n      lng: result?.longt,\n      region: result?.region,\n      state: result?.state,\n      timezone: result?.timezone,\n    })\n    setLoading(false)\n  }\n\n  function locationError() {\n    setError('Could not find location . Enter location manually')\n\n    setLoading(false)\n  }\n\n  return {\n    loading,\n    data,\n    error,\n    getLocation,\n    setError,\n  }\n}\n\nexport default useLocationService\n","import {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  CircularProgress,\n  Typography,\n} from '@material-ui/core'\nimport { Alert } from '@material-ui/lab'\nimport { LocationOn } from '@material-ui/icons'\nimport React, { useEffect, useState } from 'react'\nimport useLocationService from '../../../hooks/useLocationService'\n\nfunction EditLocation({ location, setLocation, updateLocation, loading }) {\n  const [dialog, setDialog] = useState(false)\n  const {\n    loading: locationLoading,\n    error,\n    data,\n    setError,\n    getLocation,\n  } = useLocationService()\n\n  useEffect(() => {\n    setLocation(data)\n  }, [data])\n\n  const handleUpdate = () => {\n    setDialog(false)\n    updateLocation()\n  }\n\n  const handleFetchLocation = () => {\n    setError(null)\n    getLocation()\n  }\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => setDialog(true)}\n      >\n        Edit\n      </Button>\n\n      <Dialog\n        open={dialog}\n        onClose={() => setDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>Update Location</DialogTitle>\n        <DialogContent>\n          {error && <Alert severity=\"error\">{error}</Alert>}\n          {location && (\n            <Typography>\n              {location.city},{location.state},{location.country}\n            </Typography>\n          )}\n          <Button\n            style={{ width: '100%' }}\n            color=\"primary\"\n            variant=\"contained\"\n            startIcon={<LocationOn />}\n            onClick={handleFetchLocation}\n          >\n            {locationLoading ? (\n              <CircularProgress\n                variant=\"indeterminate\"\n                color=\"primary\"\n                size=\"26px\"\n              />\n            ) : (\n              'My Location'\n            )}\n          </Button>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDialog(false)}>Cancel</Button>\n          <Button onClick={handleUpdate}>Update</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default EditLocation\n","import { useState, useEffect } from \"react\";\n\nconst initialized: HTMLScriptElement[] = [];\nexport function useGoogleMapsApi(apiKey: string) {\n  const [googleApi, setGoogleApi] = useState();\n\n  useEffect(() => {\n    if ((window as any).google) {\n      // if window.google object is already available just use it\n      setGoogleApi((window as any).google);\n      return;\n    }\n    const src = \"https://maps.googleapis.com/maps/api/js?key=\" + apiKey;\n\n    const existingScript = initialized.find(el => el.src === src);\n\n    const onLoad = () => {\n      setGoogleApi((window as any).google);\n    };\n    if (existingScript) {\n      // if script tag was added by other element just check when it is loaded\n      existingScript.addEventListener(\"load\", onLoad);\n      return;\n    }\n\n    const script = document.createElement(`script`);\n    script.src = src;\n    script.async = true;\n    script.defer = true;\n    script.addEventListener(`load`, onLoad);\n    (document.head as any).appendChild(script);\n    initialized.push(script);\n\n    return () => {\n      script.removeEventListener(`load`, onLoad);\n      script.remove();\n      initialized.splice(\n        initialized.findIndex(el => el.src === src),\n        1,\n      );\n    };\n  }, [apiKey]);\n\n  return googleApi;\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { useGoogleMapsApi } from \"./useGoogleMapsApi\";\n\nexport function useGoogleMaps(apiKey: string, options: google.maps.MapOptions) {\n  const google = useGoogleMapsApi(apiKey);\n  const ref = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState();\n\n  useEffect(() => {\n    if (!google || !ref) {\n      return;\n    }\n    setMap(new google.maps.Map(ref.current, options));\n  }, [google, ref]);\n\n  return { ref, map, google };\n}\n","import React from 'react'\nimport { useGoogleMaps } from 'react-hook-google-maps'\nfunction GoogleMap({coords,zoom=17}) {\n  const { ref } = useGoogleMaps(\n    'AIzaSyBMZsZfaghR7UAmCwaNU4fHrnFfn7lYtFw',\n    {\n      center: coords,\n      zoom,\n    },\n  )\n  return <div ref={ref} style={{ width: '100%', height: '400px' }} />\n}\n\nexport default GoogleMap\n","import {\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core'\nimport React, { useContext, useState } from 'react'\nimport { UserContext } from '../../App'\nimport EditLocation from './Location/EditLocation'\nimport useUpdateProfile from '../../hooks/useUpdateProfile'\nimport GoogleMap from '../UI/GoogleMap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faCity,\n  faHouseUser,\n  faMapPin,\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock, faMap } from '@fortawesome/free-regular-svg-icons'\nfunction Location() {\n  const { userState } = useContext(UserContext)\n  const [location, setLocation] = useState(null)\n\n  const { editLocation, loading } = useUpdateProfile()\n\n  const updateLocation = () => {\n    editLocation(location)\n  }\n  return (\n    <div>\n      <Grid container alignItems=\"center\" justify=\"space-between\">\n        <Grid item>\n          <Typography\n            style={{\n              fontSize: '24px',\n              fontWeight: '800',\n              marginBottom: '16px',\n              marginTop: '16px',\n            }}\n          >\n            Location Setting\n          </Typography>\n        </Grid>\n        <Grid item>\n          <EditLocation\n            location={location}\n            setLocation={setLocation}\n            updateLocation={updateLocation}\n            loading={loading}\n          />\n        </Grid>\n      </Grid>\n      <div style={{ marginTop: '16px', marginBottom: '16px' }}>\n        {userState.currentUser.location && (\n          <List>\n            <ListItem>\n              <ListItemIcon>\n                <FontAwesomeIcon icon={faHouseUser} />\n              </ListItemIcon>\n              <ListItemText>{userState.currentUser.location.city}</ListItemText>\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <FontAwesomeIcon icon={faCity} />\n              </ListItemIcon>\n              <ListItemText>\n                {userState.currentUser.location.state}\n              </ListItemText>\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <FontAwesomeIcon icon={faMap} />\n              </ListItemIcon>\n              <ListItemText>\n                {userState.currentUser.location.country}\n              </ListItemText>\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <FontAwesomeIcon icon={faMapPin} />\n              </ListItemIcon>\n              <ListItemText>\n                {userState.currentUser.location.lat} {' , '}\n                {userState.currentUser.location.lng}\n              </ListItemText>\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <FontAwesomeIcon icon={faCity} />\n              </ListItemIcon>\n              <ListItemText>\n                {userState.currentUser.location.region}\n              </ListItemText>\n            </ListItem>\n\n            <ListItem>\n              <ListItemIcon>\n                <FontAwesomeIcon icon={faClock} />\n              </ListItemIcon>\n              <ListItemText>\n                {userState.currentUser.location.timezone}\n              </ListItemText>\n            </ListItem>\n          </List>\n        )}\n\n        {userState.currentUser.location && (\n          <Grid container style={{ marginTop: '20px' }}>\n            <Grid item xs={12} sm={12} md={12}>\n              <GoogleMap\n                coords={{\n                  lng: parseFloat(userState.currentUser.location.lng),\n                  lat: parseFloat(userState.currentUser.location.lat),\n                }}\n              />\n            </Grid>\n          </Grid>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Location\n"],"names":["createSvgIcon","React","d","useState","loading","setLoading","error","setError","data","setData","locationError","getLocation","navigator","geolocation","getCurrentPosition","position","apiUrl","coords","latitude","longitude","axios","then","result","city","country","lat","latt","lng","longt","region","state","timezone","locationSuccess","catch","err","getCityAndCountry","timeout","location","setLocation","updateLocation","dialog","setDialog","useLocationService","locationLoading","useEffect","Button","variant","color","onClick","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","Alert","severity","Typography","style","width","startIcon","LocationOn","CircularProgress","size","DialogActions","initialized","useGoogleMaps","apiKey","options","google","googleApi","setGoogleApi","window","src","existingScript","find","el","onLoad","script","document","createElement","async","defer","addEventListener","head","appendChild","push","removeEventListener","remove","splice","findIndex","useGoogleMapsApi","ref","useRef","map","setMap","maps","Map","current","zoom","center","height","userState","useContext","UserContext","useUpdateProfile","editLocation","Grid","container","alignItems","justify","item","fontSize","fontWeight","marginBottom","marginTop","currentUser","List","ListItem","ListItemIcon","icon","faHouseUser","ListItemText","faCity","faMap","faMapPin","faClock","xs","sm","md","parseFloat"],"sourceRoot":""}